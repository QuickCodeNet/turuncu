//------------------------------------------------------------------------------ 
// <auto-generated> 
// This code was generated by QuickCode. 
// Runtime Version:1.0
// 
// Changes to this file may cause incorrect behavior and will be lost if 
// the code is regenerated. 
// </auto-generated> 
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.Data.SqlClient;
using QuickCode.Turuncu.UserManagerModule.Application.Models;
using QuickCode.Turuncu.UserManagerModule.Domain.Entities;
using QuickCode.Turuncu.UserManagerModule.Application.Interfaces.Repositories;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using QuickCode.Turuncu.UserManagerModule.Persistence.Contexts;
using QuickCode.Turuncu.UserManagerModule.Application.Dtos;

namespace QuickCode.Turuncu.UserManagerModule.Persistence.Repositories
{
    public partial class KafkaEventsRepository : IKafkaEventsRepository
    {
        private readonly WriteDbContext _writeContext;
        private readonly ReadDbContext _readContext;
        private readonly ILogger<KafkaEventsRepository> _logger;
        public KafkaEventsRepository(ILogger<KafkaEventsRepository> logger, WriteDbContext writeContext, ReadDbContext readContext)
        {
            _writeContext = writeContext;
            _readContext = readContext;
            _logger = logger;
        }

        public async Task<DLResponse<KafkaEvents>> InsertAsync(KafkaEvents value)
        {
            var returnValue = new DLResponse<KafkaEvents>(value, "Not Defined");
            try
            {
                await _writeContext.KafkaEvents.AddAsync(value);
                await _writeContext.SaveChangesAsync();
                returnValue.Value = value;
            }
            catch (SqlException ex)
            {
                _logger.LogError("{repoName} SqlException {error}", "KafkaEvents Insert", ex.Message);
                if (ex.Number.Equals(2627))
                {
                    returnValue.Code = 999;
                    returnValue.Value = value;
                }
                else
                {
                    returnValue.Code = 998;
                    returnValue.Value = value;
                }

                returnValue.Message = ex.ToString();
            }
            catch (Exception ex)
            {
                _logger.LogError("{repoName} Exception {error}", "KafkaEvents Insert", ex.Message);
                returnValue.Code = 500;
                returnValue.Value = value;
                returnValue.Message = ex.ToString();
            }

            return returnValue;
        }

        public async Task<DLResponse<bool>> UpdateAsync(KafkaEvents value)
        {
            var returnValue = new DLResponse<bool>(false, "Success");
            try
            {
                _writeContext.Set<KafkaEvents>().Update(value);
                await _writeContext.SaveChangesAsync();
                returnValue.Value = true;
            }
            catch (SqlException ex)
            {
                _logger.LogError("{repoName} SqlException {error}", "KafkaEvents Update", ex.Message);
                if (ex.Number.Equals(2627))
                {
                    returnValue.Code = 999;
                }
                else
                {
                    returnValue.Code = 998;
                }

                returnValue.Message = ex.ToString();
            }
            catch (Exception ex)
            {
                _logger.LogError("{repoName} Exception {error}", "KafkaEvents", ex.Message);
                returnValue.Code = 404;
                returnValue.Message = ex.ToString();
            }

            return returnValue;
        }

        public async Task<DLResponse<bool>> DeleteAsync(KafkaEvents value)
        {
            var returnValue = new DLResponse<bool>(false, "Success");
            try
            {
                _writeContext.KafkaEvents.Remove(value);
                await _writeContext.SaveChangesAsync();
                returnValue.Value = true;
            }
            catch (SqlException ex)
            {
                _logger.LogError("{repoName} SqlException {error}", "KafkaEvents Delete", ex.Message);
                if (ex.Number.Equals(2627))
                {
                    returnValue.Code = 999;
                }
                else
                {
                    returnValue.Code = 998;
                }

                returnValue.Message = ex.ToString();
            }
            catch (Exception ex)
            {
                _logger.LogError("{repoName} Exception {error}", "KafkaEvents Delete", ex.Message);
                returnValue.Code = 404;
                returnValue.Message = ex.ToString();
            }

            return returnValue;
        }

        public async Task<DLResponse<KafkaEvents>> GetByPkAsync(int id)
        {
            var returnValue = new DLResponse<KafkaEvents>();
            try
            {
                var result =
                    from kafka_events in _readContext.KafkaEvents
                    where kafka_events.Id.Equals(id)select kafka_events;
                returnValue.Value = await result.FirstAsync();
                if (returnValue.Value == null)
                {
                    returnValue.Code = 404;
                    returnValue.Message = $"Not found in KafkaEvents";
                    return returnValue;
                }
            }
            catch (Exception ex)
            {
                _logger.LogError("{repoName} Exception {error}", "KafkaEvents GetByPk", ex.Message);
                returnValue.Code = 404;
                returnValue.Message = ex.ToString();
            }

            return returnValue;
        }

        public async Task<DLResponse<List<KafkaEvents>>> ListAsync(int? pageNumber = null, int? pageSize = null)
        {
            var returnValue = new DLResponse<List<KafkaEvents>>();
            try
            {
                if (pageNumber < 1)
                {
                    returnValue.Code = 404;
                    returnValue.Message = "Page Number must be greater than 1";
                }
                else
                {
                    if (pageNumber != null)
                    {
                        var skip = ((pageNumber - 1) * pageSize);
                        var take = pageSize;
                        returnValue.Value = await _readContext.KafkaEvents.Skip(skip.Value).Take(take.Value).ToListAsync();
                    }
                    else
                    {
                        returnValue.Value = await _readContext.KafkaEvents.ToListAsync();
                    }
                }
            }
            catch (Exception ex)
            {
                returnValue.Code = 404;
                returnValue.Message = ex.ToString();
            }

            return returnValue;
        }

        public async Task<DLResponse<int>> CountAsync()
        {
            var returnValue = new DLResponse<int>();
            try
            {
                returnValue.Value = await _readContext.KafkaEvents.CountAsync();
            }
            catch (Exception ex)
            {
                returnValue.Code = 404;
                returnValue.Message = ex.ToString();
            }

            return returnValue;
        }

        public async Task<DLResponse<List<KafkaEventsGetKafkaEventsResponseDto>>> KafkaEventsGetKafkaEventsAsync()
        {
            var returnValue = new DLResponse<List<KafkaEventsGetKafkaEventsResponseDto>>();
            try
            {
                var queryableResult =
                    from kafka_events in _readContext.KafkaEvents
                    join api_method_definitions in _readContext.ApiMethodDefinitions on kafka_events.ApiMethodDefinitionId equals api_method_definitions.Id
                    select new KafkaEventsGetKafkaEventsResponseDto()
                    {
                        Id = kafka_events.Id,
                        ApiMethodDefinitionId = kafka_events.ApiMethodDefinitionId,
                        TopicName = kafka_events.TopicName,
                        OnComplete = kafka_events.OnComplete,
                        OnError = kafka_events.OnError,
                        OnTimeout = kafka_events.OnTimeout,
                        HttpMethod = api_method_definitions.HttpMethod,
                        ControllerName = api_method_definitions.ControllerName,
                        Path = api_method_definitions.Path
                    };
                var result = await queryableResult.ToListAsync();
                returnValue.Value = result;
            }
            catch (Exception ex)
            {
                _logger.LogError("{repoName} Exception {error}", "KafkaEvents KafkaEventsGetKafkaEvents", ex.Message);
                returnValue.Code = 404;
                returnValue.Message = ex.ToString();
            }

            return returnValue;
        }
    }
}